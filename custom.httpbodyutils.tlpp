#include 'totvs.ch'
#include 'tlpp-core.th'
#include 'tlpp-rest.th'

Class HttpBodyUtils
	// Public property to hold the parsed JSON
	public data oJsonBody as object
	public method new() constructor
	public method checkBodyRequest() as logical
endclass

method new() class HttpBodyUtils
	::oJsonBody := Nil
Return self

method checkBodyRequest() class HttpBodyUtils
	Local cBody as character
	Local xRet  as variant

	cBody := oRest:getBodyRequest()

	if Empty(cBody)
		oRest:SetStatusCode(400)
		oRest:SetResponse("Request body not sent.")
		Return .F.
	endif

	// --- Robust Parsing Logic ---
	::oJsonBody := JsonObject():new()

	// 1. Try to parse directly
	xRet := ::oJsonBody:FromJson(cBody)

	// 2. If it fails, try decoding from UTF-8 and parse again
	if xRet != Nil
		cBody := DecodeUTF8(cBody)
		xRet := ::oJsonBody:FromJson(cBody)
	endif

	// 3. If it still fails after both attempts, the JSON is truly invalid
	if xRet != Nil
		oRest:SetStatusCode(400)
		oRest:SetResponse("Invalid JSON format: " + xRet)
		Return .F.
	endif

Return .T.
